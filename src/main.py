from .genetic_algorithm import run_genetic_algorithm  # Import the function
from .rta_star import rta_star
from .timetable import Timetable

def save_timetable_to_file(timetable_object, filename):
    """
    Save the timetable to a text file.
    
    Args:
    - timetable_object (Timetable): The Timetable object generated by GA or RTA*.
    - filename (str): The name of the file to save the timetable.
    """
    with open(filename, 'w') as file:
        file.write("Final Timetable:\n")
        # Assuming timetable_object has a method get_timetable_entries() that returns the timetable
        for course, room, teacher, timeslot in timetable_object.get_timetable_entries():
            file.write(f"Course: {course}, Room: {room}, Teacher: {teacher}, Timeslot: {timeslot}\n")
    print(f"Timetable saved to {filename} file.")


if __name__ == "__main__":
    print("Running Timetable Generator with Fine-Tuned Hybrid Approach...")

    # Fine-Tuned Genetic Algorithm parameters
    print("\nRunning Fine-Tuned Genetic Algorithm...")
    best_ga_solution = run_genetic_algorithm(
        population_size=250, 
        generations=150, 
        crossover_prob=0.8, 
        mutation_prob=0.2, 
        elite_size=3
    )
    
    # Debugging: Print GA output
    print("\nBest Genetic Algorithm Timetable:")
    print(best_ga_solution)

    # Fine-Tuned RTA* parameters for local refinement
    print("\nRefining with Fine-Tuned Real-Time A* Algorithm...")
    best_rta_solution = rta_star(
        initial_solution=Timetable(best_ga_solution),
        max_depth=15, 
        max_iterations=700
    )

    # Debugging: Print RTA* output
    print("\nRefined RTA* Timetable:")
    print(best_rta_solution)

    # Save the final RTA* timetable to optimal_schedule.txt
    save_timetable_to_file(best_rta_solution, 'optimal_schedule.txt')
